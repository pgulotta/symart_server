/*
   Mathieu Stefani, 07 février 2016

   Example of a REST endpoint with routing
*/

#include <algorithm>

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/endpoint.h>

#include "requesthandler.hpp"

using namespace std;
using namespace Pistache;

void printCookies( const Http::Request& req )
{
  auto cookies = req.cookies();
  std::cout << "Cookies: [" << std::endl;
  const std::string indent( 4, ' ' );

  for ( const auto& c : cookies ) {
    std::cout << indent << c.name << " = " << c.value << std::endl;
  }

  std::cout << "]" << std::endl;
}

namespace Default {

void handleReady( const Rest::Request&, Http::ResponseWriter response )
{
  response.send( Http::Code::Ok, "1" );
}

}

class SymArtEndpoint
{
public:
  SymArtEndpoint( Address addr )
    : httpEndpoint( std::make_shared<Http::Endpoint>( addr ) )
  { }

  void init( size_t thr = 2 )
  {
    auto opts = Http::Endpoint::options()
                .threads( thr );
    httpEndpoint->init( opts );
    setupRoutes();
  }

  void start()
  {
    httpEndpoint->setHandler( router.handler() );
    httpEndpoint->serve();
  }

private:
  void setupRoutes()
  {
    using namespace Rest;

    Routes::Post( router, "/record/:name/:value?", Routes::bind( &SymArtEndpoint::doRecordMetric, this ) );
    Routes::Get( router, "/value/:name", Routes::bind( &SymArtEndpoint::doGetMetric, this ) );
    Routes::Get( router, "/ready", Routes::bind( &Default::handleReady ) );
    Routes::Get( router, "/auth", Routes::bind( &SymArtEndpoint::doAuth, this ) );

  }

  void doRecordMetric( const Rest::Request& request, Http::ResponseWriter response )
  {
    cout << endl << "  doRecordMetric " << endl;
    auto name = request.param( ":name" ).as<std::string>();
    cout << "*********name=" << name << "  ***********";
    Guard guard( metricsLock );
    auto it = std::find_if( metrics.begin(), metrics.end(), [&]( const Metric & metric ) {
      return metric.name() == name;
    } );

    int val = 1;

    if ( request.hasParam( ":value" ) ) {
      auto value = request.param( ":value" );
      val = value.as<int>();
      cout << "********* val=" << val << "  ***********";
    }


    if ( it == std::end( metrics ) ) {
      metrics.push_back( Metric( std::move( name ), val ) );
      response.send( Http::Code::Created, std::to_string( val ) );
    } else {
      auto& metric = *it;
      metric.incr( val );
      response.send( Http::Code::Ok, std::to_string( metric.value() ) );
    }

  }

  void doGetMetric( const Rest::Request& request, Http::ResponseWriter response )
  {
    auto name = request.param( ":name" ).as<std::string>();

    Guard guard( metricsLock );
    auto it = std::find_if( metrics.begin(), metrics.end(), [&]( const Metric & metric ) {
      return metric.name() == name;
    } );

    if ( it == std::end( metrics ) ) {
      response.send( Http::Code::Not_Found, "Metric does not exist" );
    } else {
      const auto& metric = *it;
      response.send( Http::Code::Ok, std::to_string( metric.value() ) );
    }

  }

  void doAuth( const Rest::Request& request, Http::ResponseWriter response )
  {
    cout << endl << "  doAuth " << endl;
    printCookies( request );
    response.cookies()
    .add( Http::Cookie( "lang", "en-US" ) );
    response.send( Http::Code::Ok );
  }

  class Metric
  {
  public:
    Metric( std::string name, int initialValue = 1 )
      : name_( std::move( name ) )
      , value_( initialValue )
    { }

    int incr( int n = 1 )
    {
      int old = value_;
      value_ += n;
      return old;
    }

    int value() const
    {
      return value_;
    }

    std::string name() const
    {
      return name_;
    }
  private:
    std::string name_;
    int value_;
  };

  typedef std::mutex Lock;
  typedef std::lock_guard<Lock> Guard;
  Lock metricsLock;
  std::vector<Metric> metrics;

  std::shared_ptr<Http::Endpoint> httpEndpoint;
  Rest::Router router;
};

int main( int argc, char* argv[] )
{

  std::shared_ptr<RequestHandler>  requestHandler = std::make_shared<RequestHandler> ( RequestHandler{9080} );
//  Port port( 9080 );

//  int thr = 2;

//  if ( argc >= 2 ) {
//    port = std::stol( argv[1] );

//    if ( argc == 3 ) {
//      thr = std::stol( argv[2] );
//    }
//  }

//  Address addr( Ipv4::any(), port );

//  cout << "rest_server.cpp:  Cores = " << hardware_concurrency() << endl;
//  cout << "rest_server.cpp:  Using " << thr << " threads" << endl;

//  SymArtEndpoint stats( addr );

//  stats.init( thr );
//  stats.start();
}
